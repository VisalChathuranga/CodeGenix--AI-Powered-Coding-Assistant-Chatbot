
=== Page 1 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd
Lesson 5 Shape Recognition

1. Program Logic

Recognize the object of different shapes by the camera. When the shape
of an object is identified (triangle, rectangle, circle), the object with the

corresponding shape will be outlined in the transmitted image.

First, the color of the recognized object is identified. Then, the object's
corner points are detected. The obtained corner points are analyzed and
distinguished according to the number of corners corresponding to different

shapes, as shown in the table below:

0 Circle
3 Triangle
4 Rectangle

Then, the identified shape is outlined using the corresponding shape in

the image.

2. Operation Steps

If you use the system image we provide, you can find the corresponding
program in the folder “3 Jetson Orin Nano Basic Operation -> 2.
Introduction to System Desktop .”

This method requires that the purchased kit includes the expansion board.




=== Page 2 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

Prior to operations, you need to transfer the routine “ShapeRecognize.py”
stored in “6. OpenCV Computer Vision Course\ Program Files” to the Jetson

Orin Nano.

For the file transfer method, you can refer to the content in “3. Basic

Operation Course”.

Noted: The input command should be case sensitive, and the “Tab” key is able

to implement the key works.

>

A

Terminal

1) Open Nocmahine. Double click on , or use the shortcut key to

open the terminal. Enter the command to start shape recognition.

python3 ShapeRecognition.py

python3 ShapeRecognition.py

At this point, the terminal's live camera feed will display. When a green
object is recognized, the corresponding object will be outlined with a red line,

and the name of the object's shape will be displayed above, as shown in the

image below:
GeavuveecaueEs GeavceeceaeaaEs

aa

(x=89, y=468) ~ (x=354, y=461) ~ R:180 G 181 B:178

To close this program, press “q’.



=== Page 3 ===
ry IWED mM Oo i) t Shenzhen Hiwonder Technology Co,Ltd

3. Program Analysis

The program is stored in:

/home/ubuntu/Opencv/ShapeRecognition.py

def detection(gray, image):

# SMD Fusing a findContours() function
contours, _ = cv2.findContours(

gray, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
i=0
# list for storing names of shapes
for contour in contours:

3.1 Import Library File

Import the cv2 library from openCV, and import and instantiate the numpy

library as np.
import cv2
import numpy as np

3.2 Detect Object Color and Draw Frame

Define a function to detect the color of the object and outline its contour.

The specific code is shown in the image below:



=== Page 4 ===
bet iIiweander Shenzhen Hiwonder Technology Co,Ltd

def detection(gray, image):

contours, _ = cv2.findContours(

gray, cv2.RETR_TREE, cv2.CHAIN APPROX SIMPLE)
i=98

for contour in contours:
if i == 06:

ial
continue

approx = cv2.approxPolyDP(

contour, 8.06 * cv2.arcLength(contour, True), True)
cv2.drawContours(image, [contour], 9, (9, 8, 255), 5)
M = cv2.moments(contour)

if M['m00'] != 0.6:
x = int(M['m16'] / M['mo0'])

Call the findContours() function from the cv2 library to detect the
boundaries of the object and assign the value 0 to i, as shown in the image

below:

def detection(gray, image):

contours, _ = cv2.findContours(

gray, cv2.RETR TREE, cv2.CHAIN APPROX SIMPLE)
i=06

At the same time, set up a loop to iterate through the detection data.

Then, use the approxPolyDP() function from the cv2 library to calculate

the number of sides of the object.

approx = cv2.approxPolyDP(
contour, 0.06 * cv2.arcLength(contour, True), True)

Then, use the drawContours() function to draw the edge lines.

cv2.drawContours(image, [contour], 8, (0, 6, 255), 5)

The parameters of the drawContours() function are as follows:



=== Page 5 ===
Hivweander Shenzhen Hiwonder Technology Co,Ltd

The first parameter, “image”, represents the target image.

The second parameter, “[contours]”, represents the input contour set, where

each contour is composed of a vector of points.

The third parameter, “O”, specifies which contour to draw. If this parameter is

negative, all contours will be drawn.
The fourth parameter, “(0, 0, 255)”, specifies the color of the contour.

The fifth parameter, “5”, denotes the line width of the contour. If it is negative or

set to CV_FILLED, the contour will be filled.

3.3 Shape Classification

Determine the shape based on the number of identified sides. If the number of
sides is 3, it is a triangle, and the feedback screen will display “Triangle.” If the
number of sides is 4, it is a rectangle, and the feedback screen will display
“Quadrilateral.” Otherwise, it is a circle, and the feedback screen will display

“Circle.”

# MiMSMHAputting shape name at center of each shape
##0 il = FAR
if len(approx) == 3:
cv2.putText(image, ‘Triangle'] (x, y),
cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)

#4 MERZ
elif len(approx) == 4:
cv2.putText(image, ‘Quadrilateral’, (x, y),
cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
ae MR
else:
cv2.putText(image, ‘circle’, (x, y),
cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)



