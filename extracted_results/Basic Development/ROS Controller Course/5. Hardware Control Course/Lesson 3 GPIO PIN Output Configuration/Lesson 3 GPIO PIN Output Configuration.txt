
=== Page 1 ===
HIW/E9MOCT Shenzhen Hiwonder Technology Co,Ltd

Lesson 3 GPIO PIN Output
Configuration

1. Introduction to GPIO Pin

GPIO, a general-purpose input/output, is a set of pins on an electronic circuit
board which can be used to receive or transmit electrical signals. It’s a
standard interface used to connect with external hardware device to realize
external communication, external hardware control or external hardware data

collection.

2. GPIO Output

Output is a function required to control the pin level, and the high and low level
can be presented by 1 and 0. For example, if you want to switch a LED light on,
the pin connected to LED needs to be set for high level state, which will form
voltage difference with another low level end to generate current to enable

LED light up.

3. Introduction to GPIO Pin

Jetson Orin Nano development board features a 40-pin interface used to
connect expansion board. Calling jetson-gpio library can control GPIO and

PWM ports, as well as perform read, write, and interrupt operations.

The pins layout is as follow:



=== Page 2 ===
| iIiVW6D mM Oo =) t Shenzhen Hiwonder Technology Co,Ltd

&@BSSeBeagser

4. Run Program

If you are using the system image we provide, you can find the corresponding
program in the folder “3 Jetson Orin Nano Basic Operation -> 2.
Introduction to System Desktop .”

This method requires that the purchased kit includes the expansion board.

1) Install the expansion board as shown in the image below:

i
v0
Cs
Ls:




=== Page 3 ===
HIW/E9MOCT Shenzhen Hiwonder Technology Co,Ltd

2) Import the program file “led_demo.py” program file from the same
directory into the main directory of the board's system. You can refer to “3.
Jetson Orin Nano Basic Operations -> 4. Remote Connection” for the

import method.



=== Page 4 ===
Hiwender Shenzhen Hiwonder Technology Co,Ltd

G} Home

me BS GB Ba a

* Starred board Desktop Documents Downloads i Pictures Public

demo
(Gat Home

>
(©) Desktop et e Ar

Templates Videos led_demo. nomachine

[=] Documents py _8.13.1_1_
arm64.deb

>
3) Double click al to open the terminal. Enter the command, and
press Enter to execute the program.

python3 led_demo.py

python3 led_demo.pyff

4) When running the program, the LED light will blink rapidly twice, stay

on continuously once, and then repeat this sequence in a loop.

5. GPIO Output Configuration

>
1) Double click | Enter the command to install the busybox.

sudo apt-get install busybox -y

sudo apt-get install busybox -y

2) Select the pins to be driven. In here, we will use BCM encoding 24 as
an example. (24 presents the pins for driving the small light on the expansion

board.) According to the table below, its physical pin number is 18.



=== Page 5 ===
oy IVE) mM Oo a) t Shenzhen Hiwonder Technology Co,Ltd

=

are

l
|

:
li

3) You'll need to find the Soc Pin Name corresponding the physical pin 18
from the below table. Here it is “GP39_SPI3_CS0_N”. You need to take note of

it for future reference.



=== Page 6 ===
HIWENGECT Shenzhen Hiwonder Technology Co,Ltd

pen fom P15 1208.CLK [aC #1 Clock fo ene mao pene fosor bara |
a ee —enneeroe es a a

GP70_UART1_T
UART1_TXD XD_BOOT2_STR | UART #1 Transmit Output/Bidir
LaF

GP71_UAR
UART1_RXD UART #1 Receive Input/Bidir

GP72_UAR UART #2 Request to B P pd
UART1 ig Bidir/Ou'

GP48_SPI1_MIS SPI #0 Primary
SPIO_MISO input
jecondary Out
GP37_SPI3_MIS 1 Primary
SPI1_MISO

ot aes | SP! wel | SPI #0 Shift Clock sama lam |




=== Page 7 ===
be iIiWE) mM Oo © Shenzhen Hiwonder Technology Co,Ltd

ower-
Header Module Pin Module Default Usage/ Alternate PIO n U/PD on
Pin# Name Pin# SoC PinName_ Description Functionality Type/ Dir #= ~=Default Module jotes
GP50_SPI1_CSO #20uA 'PZ.06 8
24 SPIO_CSO* 95 i GPIO SPI #0 Chip Select #0 | Bidir/Output
25 - - - Ground - Ground
GP51_SPI1_CS1 t20uA \PZ.07 uu 38
26 SPIO_CS1* 97 N GPIO SPI #0 Chip Select #1 | Bidir/Output
Bidir #2 mA PDD.0O 1.5KQPU 2
27 12CO_SDA 187 GP14_l2C2_DAT | l2C #0 Data GPIO
OD/Bidir
Bidir #2mA \PCC.07 1.5KQPU 2
28 12CO_SCL 185 GP13_l2C2_CLK | l2C #0 Clock GPIO
OD/Bidir
General Purpose oe #20uA 'PQ.05 id B
29 GPIOO1 118 GP65 GPIO Bidir/Output
Clock #0
30 - - - | Ground - Ground E
General Purpose om t20uA 'PQ.06 id 38
31 GPIO11 216 GP66 GPIO Bidir/Output
Clock #1
32 GPIOO7 206 GP113_PWM7 GPIO PWM Bidir/Output +20uA PG.06 8
oa) GPIO13 228 GP115 GPIO PWM Bidir/Output #20uA \PH.0O 8
34 - - - Ground - Ground E
Audio 12S #0 Field #20uA B
35 12SO_FS 197 GP125 GPIO Bidir
Select
GP73_UART1_ UART #1 Clear to t20uA
36 UARTI_CTS* | 209 GPIO Bidir/Input
CTS_N Send
GP38_SPI3_MO SPI #1 Primary #20uA
37 SPI1_MOSI 104 GPIO Bidir/Output
SI Out/Secondary In
38 12SO_DIN 195 GP124 GPIO Audio 12S #0 Data in | Bidir/Input 20uA
39 - - - Ground - Ground
Audio 12S #0 Data 20uA Pl.00 id B
40 12SO_DOUT 193 GP123 GPIO Gak Bidir/Output
tu’

4) Open the “Orin-TRM_DP10508002_v1.2p.pdf” in the same directory,
and search for “SPI3_CS0” within the file. Locate “PADCTL_G2_SPI3_CS0_0”
and record the Offset parameter: 0X10

PADCTL_G2_SPI3_CSO_O
Offset: 0x10

Read/Write: R/W

Parity Protection: Y

Shadow: N

SCR Protection: PADCTL_G2_SCR_SCR_SPI3_CS0O_0O

Reset: 0x00000430 (Obxxxx,xxxx,xXXX,XXXX,XxXX0O,x 1x0,001 1,0000)

5) Locate the character corresponding to “G2” according to the table

below, which is “PADCTL_A13”



=== Page 8 ===
Hivwoander Shenzhen Hiwonder Technology Co,Ltd

Pad Control Group GPIO Support Control Registers Base Address Block
AO Yes PADCTL_A14
AO_HV Yes PADCTL_A15
DEBUG Yes PADCTL_AS
EDP Yes PADCTL_A16
EMMC No PADCTL_A6
EQOS Yes PADCTL_A21
PEX_CTL Yes PADCTL_A7
PEX_CTL:2 Yes PADCTL_A20
PEX.CTL<3 Yes PADCTL_A25
QSPI Yes PADCTL_A11
SDMM1_HV Yes PADCTL_A8
SYS Yes PADCTL_A12
UFS Yes PADCTL_A17
G2 Yes PADCTL_A13
G3 Yes PADCTL_AO

G4 Yes PADCTL_A4

GS Yes PADCTL_A2

G7 Yes PADCTL_A24
Pad Control Group GPIO Support Control Registers Base Address Block
G8 No PSC_PADCTL
G9 Yes FSILPADCTL_AO
G10 Yes FSILPADCTL_A1
G11 Yes FSI_PADCTL_A2

6) Open the file “Orin-TRM_DP10508002_v1.2p.pdf’ file in the same
directory, and search for “System Address Map’. You need note the parameter
corresponding to “PADCTL_A13”: 0x0243d000. Calculate the corresponding
Pinmux register address: 0x0243d000 + 0X10 = 0x0243d010



=== Page 9 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

BS
Q System Address Map

mse) fj Block Name Address Start Address End

s GPIO_CTL7_GPIO1 0x02281000 0x02281 fff SYSTEM
*[] Memory Architecture and Me _CTL7_{ x x

mory Mapped 1/0 GPIO_CTL7_GPIO2 Ox02282000 Ox02282 fff SYSTEM
. Rl Address Map GPIO_CTL7_GPIO3 0x02283000 0x02283 fff SYSTEM
= GPIO_CTL7_GPIO4 0x02 284000 0x02284 fff SYSTEM
System Address Map
GPIO_CTL7_GPIOS 0x02285000 Ox02285 fff SYSTEM

+L] System Components HDACODEC 0x0242c000 Ox0242cfff SYSTEM

+[] GPIO Controllers 6 PADCTLA 0x02.4300¢)9 Ox0244fffF SYSTEM

anes PADCTL_AO (0x02430000 0x02430fff SYSTEM
+[] Registers

PADCTL_A2 0x02432000 0x02432 fff SYSTEM

[] System Address Ma
p (AMAP) PADCTLA4 (0x02.434000 0x02434 ff SYSTEM

PADCTLAS (0x02435000 0x02435 fff SYSTEM
PADCTLAG (0x02436000 0x02436 fff SYSTEM
PADCTL_A7 0x02437000 0x02437 fff SYSTEM
PADCTLAS: 0x02438000 0x02438 fff SYSTEM
PADCTLAI1 0x0243b000 0x0243bfff SYSTEM
PADCTLAI3 ‘0x0243d000 0x0243d fff SYSTEM
PADCTLAI6 0x02440000 0x02440fff SYSTEM
PADCTLAI7 0x02441000 0x02441 fff SYSTEM
PADCTLA2O 0x02444000 0x02444 fff SYSTEM
PADCTL_A21 (0x02445000 0x02445 fff SYSTEM
PADCTL_A24 0x02448000 0x02448 fff SYSTEM
PADCTL_A2S 0x02449000 Ox02449fff SYSTEM

Ox0245f FFF SYSTEM.

>
7) Double click | Enter the command and press Enter to check
the value corresponding to 0x0243d010. The recorded value: 0x00000055.

sudo busybox devmem @x@243d010

:- $ sudo busybox devmem 0x0243d010
0x00000055

8) Convert 0x00000055 to binary: 1010101

9) Set the 10" bit of 1011001 to 0. Since the loading zeros in binary are
omitted, the result is: 1010101.

10) Set the 6" bit of 1010101 to 0. Since the loading zeros in binary are
omitted, the result is: 10101

11) Set the 4" bit of 10101 to 0. Since the loading zeros in binary are

omitted, the result is 101.

12) Convert 101 to hexadecimal: 0x005.

13)Double click . Enter the command to set the offset value. Then,
run the .py program that requires GPIO output.

sudo busybox devmem @x0243d@10 w 0x@@5



=== Page 10 ===
Hivwoander Shenzhen Hiwonder Technology Co,Ltd
sudo busybox devmem 0x0243d010 w exeese

You can also place this command inside the .py file, as shown in the inage

below:

Open ~ m led_demo.py

1 #!/usr/bin/python3

2 # coding=utf8

3 [import os]

4 import time

S import Jetson.GPIO as GPIO
6

7 print( )
8 t

10 LED PIN = # LEDS |S
11
12 mode = GPIO.getmode()

13 4f mode == 1 or mode is >: # ZHCSiRBS | Haas
14 GPIO.setmode(GPIO.BCM) # i®ABcMaRSS

10


