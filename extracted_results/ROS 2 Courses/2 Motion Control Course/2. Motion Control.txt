
=== Page 1 ===
a IWE) M Oo = t Shenzhen Hiwonder Technology Co,Ltd

Motion Control




=== Page 2 ===
Hiwoander Shenzhen Hiwonder Technology Co,Ltd
Catalog

Motion Control... 2... cece ccc cc ec ee cee ec eee cee eee eee ee eee eens 1
1. IMU, Linear Velocity and Angular Velocity Calibration ..................008. 2
1.1 IMU Calibration .. 2... cc ccc cc cece e recent eens 3
1.2 Angular Velocity Calibration .......... cece cc cece eee eee eee eee 12
1.3 Linear Velocity Calibration ....... ccc ccc cc ccc eee eee eens 16
2. Publish IMU and Odometer Data ........... cc cece cece ec eee eee eee 19
2.1 Introduction to IMU and Odometer ........... eee eee eee eee eee 20
2.2 IMU Data Publishing ............ cee cc ee cece eee eee teen eens 21
2.3 Odometer Data Publishing ........ 0... cee cee eee eee crete eee eee 24
3. Robot Speed Control 2.2... ccc ccc ccc eee eee eee eee eee e eee 26
3.1 Program LOGIC 1... . cece cc ccc ee ee cece eee eee eee eect renee 26
3.2 Disable APP Service and Initiate Speed Control .................206. 27
3.3 Change Forward Speed ....... ccc cece eee cece cee ee eee cece eens 29
3.4 Program Outcome ...... cece ec cee cee eee eee teen e eens 30
3.5 Program AnalySiS ....... ccc eee ec eee cece eee cece eee eee renee 30

1. IMU, Linear Velocity and Angular Velocity Calibration

Note:




=== Page 3 ===
Hiwoander Shenzhen Hiwonder Technology Co,Ltd

1. The robot has been calibrated before leaving the factory and does not require

additional calibration. The information is provided for reference only. If you
observe significant deviations during robot movement, such as noticeable
drifting to one side when moving forward or an inability to travel straight, you
can consult the following tutorial for calibration.

2. Calibration aims to minimize deviations, but actual hardware variations are
inherent. Hence, adjust the calibration to a level that reasonably suits your

requirements.

If the robot exhibits deviations during operation, it may require IMU calibration.
Once the calibration process is completed, the robot can resume normal

operation.

1.1 IMU Calibration

IMU (Inertial Measurement Unit) is a device that measures the three-axis
attitude angles (angular velocity) and acceleration of an object. The gyroscope
and accelerometer are the main components of the IMU, providing a total of 6
degrees of freedom to measure the angular velocity and acceleration of the
object in three-dimensional space. Upon receiving the first IMU message, the
node will prompt you to maintain the IMU in a specific orientation and press
Enter to record the measurement values. After completing measurements in all
6 directions, the node will calculate calibration parameters and write them to

the specified YAML file. The specific steps are as follows:



=== Page 4 ===
| iIiwWeonder Shenzhen Hiwonder Technology Co,Ltd

After the node receives the first IMU message, it will prompt you to hold the
IMU in a specific direction and then press Enter to record the measurement.
After completing all 6 directions, the node will calculate the calibration
parameters and write them to the specified YAML file. The specific steps are as

follows:

Note: The input command is case-sensitive, and keywords can be completed using

the Tab key.

1) Start the robot, and access the robot system desktop using NoMachine.

2) Click-on | to start the command-line terminal.

3) Execute the command to disable the app auto-start service.

sudo systemctl stop start_app_node.service

[ stop start_app_node.service



=== Page 5 ===
HIVW/E9MCOECT Shenzhen Hiwonder Technology Co,Ltd
4) Run the command and hit Enter key to enable chassis control node:

ros2 launch ros_robot_controller ros_robot_controller.launch.py

Launch ros_robot_controller ros_robot_controller. launch. py

5) Open anew ROS2 command-line terminal, then input the following

command, and hit Enter key to initiate IMU calibration:

ros2 run imu_calib do_calib --ros-args -r
imu:=/ros_robot_controller/imu_raw --param
output_file:=/home/ubuntu/ros2_ws/src/calibration/config/imu_calib.yam

run imu_calib do _calib --ros-args -r imu:=/ros_robot_controller/imu_raw -

param output_file:=/home/ubuntu/ros2_ws/src/calibration/config/imu_calib.yaml

6) When prompted, align the robot with its front side and press Enter. The
initial orientation is considered as forward, and subsequent placements

should follow this initial direction.

Orient IMU with X+ axis up and press Enter



=== Page 6 ===
| iIiwWeonder Shenzhen Hiwonder Technology Co,Ltd

After successfully calibrating each direction, the following prompt will appear:

7) Next, the command line terminal will display the following prompt,
indicating that you can start calibrating the negative angular velocity offset
of the IMU's x-axis. Position the robot as shown in the image below
(making sure the tilt direction and angle match the illustration), then press

the Enter key to execute.

Orient IMU with X- axis up and press Enter



=== Page 7 ===
| iIiwWeonder Shenzhen Hiwonder Technology Co,Ltd

8) Next, the command line terminal will display the following prompt,
indicating that you can start calibrating the positive angular velocity offset
of the IMU's y-axis. Position the robot facing upwards as shown in the
image below (making sure the tilt direction and angle align with the

illustration), then press the Enter key to execute.



=== Page 8 ===
e
| IWE) | Oo = t Shenzhen Hiwonder Technology Co,Ltd




=== Page 9 ===
a IWE) M Oo = t Shenzhen Hiwonder Technology Co,Ltd

9)

Next, the command line terminal will display the following prompt,
indicating that you can start calibrating the negative angular velocity offset
of the IMU's y-axis. Position the robot facing downwards as illustrated in

the image below (making sure the robot's orientation and angle align with

the illustration), then press the Enter key to execute.




=== Page 10 ===
a IWE) M Oo ES t Shenzhen Hiwonder Technology Co,Ltd

10) Next, the command line terminal will display the following prompt,
indicating that you can start calibrating the positive angular velocity offset
of the IMU's z-axis. Hold the robot upright, and once it is stable, press the
Enter key. Then, position the robot as shown in the image below (ensuring
that the robot's orientation and angle align with the illustration) and press

the Enter key to execute.

10



=== Page 11 ===
| iIiwWeonder Shenzhen Hiwonder Technology Co,Ltd

11) Next, the command line terminal will display the following prompt,
indicating that you can start calibrating the negative angular velocity offset
of the IMU's z-axis. Position the robot as illustrated in the image below

(ensuring that the robot's orientation and angle align with the illustration),

and then press the Enter key to execute.

12) When the following prompt appears, it indicates that the calibration is
complete. Press ‘Ctrl+C’ in all currently open command line terminals to

stop the program.

13) Execute the following command, and hit Enter key to initiate stm32 control

node.

ros2 launch peripherals imu_view.launch.py

11



=== Page 12 ===
Hiwoander Shenzhen Hiwonder Technology Co,Ltd

eset Left-Click: Rotate. Middle-Click: Move X/Y. Right-Click/Mouse Wheel:: Zoom. Shift: More options.

1.2 Angular Velocity Calibration

To calibrate the angular velocity, the robot needs to perform a full rotation
independently. During testing, it's crucial to mark the robot's orientation to
facilitate the observation of any deviations. The specific steps are outlined

below:

Note: The input command is case-sensitive, and keywords can be completed using

the Tab key.

1) Position the robot on a flat surface and attach a piece of tape or place
another marker directly in front of it at the center.
2) Start the robot, and connect it to the robot system desktop using

NoMachine.

3) Click-on | to start the command-line terminal.
4) Run the command and hit Enter to disable the app auto-start service.

sudo systemctl stop start_app_node.service

12



=== Page 13 ===
Hiwoander Shenzhen Hiwonder Technology Co,Ltd

stop start_app_node.service

5) Before starting the calibration, navigate to the calibration configuration file

directory and open the configuration file.

cd ~/ros2_ws/src/driver/controller/config && vim calibrate_params.yaml

~/ros2_ ws/src/driver/controller/config && calibrate_params.yaml

6) Set the angular velocity parameter to 1.0, and then proceed with the

following calibration:

7) After modification, hit ESC key and input ‘:wq’ to exit and save the

modification.
8) Run the following command and hit Enter key to start the chassis control

node.

ros2 launch ros_robot_controller ros_robot_controller.launch.py

Launch ros_robot_controller ros_robot_controller.launch.py

9) Open anew command-line terminal, and type the following command,

then hit Enter key to start the angular velocity calibration.

ros2 launch calibration angular_calib.launch.py

Launch calibration angular_calib.launch.py

Click on "calibrate_angular" on the left side. The calibration interface will

appear as shown below.

13



=== Page 14 ===
| iIiwWeonder Shenzhen Hiwonder Technology Co,Ltd

rqt_reconfigure_ Param - rqt

| #Parameter Reconfigure D@® -o
Filter key: & B /calibrate_angular
Collapse all) | Expand all use_sim_time
arm_controller test_angle 360.0
calibrate_rgt_recon... speed 05
controller_manager
ekf_filter_node tolerance 15

gripper_controller

imu_calib odom_angular_scale_correction 1.0
imu_filter

joint_state_publisher start_test

odom_publisher

robot_state_publis...

ros_robot_controller

servo_manager

Refresh

(System message might be shown here when necessary)

The meanings of the parameters on the left side of the interface are as follows:

The first parameter, "test_angle," is for testing the rotation angle, with a default

value of 360°.

The second parameter, "speed," is the linear speed, with a default value of

0.15 meters per second.

The third parameter, "tolerance," is the error value. The smaller the error value,

the greater the robot's jitter after reaching the target position.

The forth parameter, "odom_angle_scale_correction," is the odometer angle

scale correction.

The fifth parameter, "start_test," is the button to start testing the odometer

angle scale correction.

14



=== Page 15 ===
| iIiwWeonder Shenzhen Hiwonder Technology Co,Ltd

1 2 3 4 5
> & be F
Make sure the robot is upright and select the 'start_test’ option. The robot will
then rotate in place. If the rotation does not complete a full circle and there is a
deviation, you need to adjust the "odom_angle_scale_correction (motor
rotation scale correction)" value. This value adjusts the scaling ratio of the
motor during rotation. It is recommended to adjust by increments of 0.01

each time and test until the robot can complete a full circle. Record this

value.

rqt_reconfigure_ Param - rqt

‘@Parameter Reconfigure D® =
Filter key: &) =) calibrate_angular

Collapse all, Expand all use_sim_time

a ular test_angle 360.0
calibrate_rqt_recon..
controller_manager speed 0.5
ekf filter node
imu_calib tolerance 15
imu_filter

joint_state_publisher odom_angular_scale_correction 1.0
odom_publisher

robot_state_publis... start test
ros_robot_controller
servo_manager

10) Having finished the calibration, execute the command to navigate to the

directory containing calibration configuration files.

cd ~/ros2_ws/src/driver/controller/config && vim calibrate_params.yaml

calibrate _params.yaml

Press ‘Il’ key to navigate to the editing mode, and modify the value of
“angular_correctqion_factor" to the adjusted value of

"odom_angule_scale_correction".

15



=== Page 16 ===
Hiwoander Shenzhen Hiwonder Technology Co,Ltd

Note: The aforementioned operations are conducted on the Mecanum-wheel

version and are equally applicable to the tank chassis version.

11) After modification, press the "ESC" key, enter ":wq" to exit and save the

changes.

1.3 Linear Velocity Calibration

Note: The input command is case-sensitive, and keywords can be completed using

the Tab key.

Position the robot on a flat and open surface. Mark the starting point with tape
or any other indicator in front of the robot, and position the endpoint tape or

another marker 1 meter ahead of the robot.

1) Start the robot, and access the robot system desktop using NoMachine.

2) Click-on | to open the ROS1 command-line terminal.

3) Execute the command and hit Enter to disable the app auto-start service.
sudo systemctl stop start_app_node.service

sudo stop start_app_node.service

4) Before starting the calibration, navigate to the calibration configuration file

directory and open the configuration file.

cd ~/ros2_ws/src/driver/controller/config && vim calibrate_params.yaml

calibrate_params.yaml

16



=== Page 17 ===
Hiwoander Shenzhen Hiwonder Technology Co,Ltd

5) Change the linear speed parameter ‘linear_correction_factor to 1.0, and

then proceed with the subsequent calibration steps.

6) After making the changes, press the 'ESC' key, type ':wq' to save and exit.

7) Next, enter the command and press Enter to activate the control node for

the chassis.

ros2 launch ros_robot_controller ros_robot_controller.launch.py

Launch ros_robot_controller ros_robot_controller.launch.py

8) Then, open a new command line terminal and input the command to

enable the linear speed calibration feature:

ros2 launch calibration linear_calib.launch.py

launch calibration Linear_calib.launch.py

9) Click on "calibrate_linear" on the left side, and the calibration interface

will appear as follows.

rqt_reconfigure_ Param - rqt

‘Parameter Reconfigure D@ -o
Filter key: fica 8 /calibrate linear
Collapse all Expand all use_sim_time

a enrrone test_distance 1.0
calibrate_rqt_recon.

controller_manager speed 0.2
ekf_filter_node

imu_calib tolerance 0.03
imu_filter

joint_state_publisher odom_linear_scale_correction 1,0
odom_publisher

robot_state_publis... start_test

ros_robot_controller
servo_manager

Refresh

(System message might be shown here when necessary)

17



=== Page 18 ===
| iIiwWeonder Shenzhen Hiwonder Technology Co,Ltd

The meanings of the parameters on the left side of the interface are as follows:

The first parameter, "test_distance," is for testing the distance, with a default

value of 1 meter.

The second parameter, "speed," is the linear speed, with a default value of 0.2

meters per second.

The third parameter, "tolerance," is the error value. The smaller the error value,

the greater the robot's jitter after reaching the target position.

The fourth parameter, "odom_linear_scale_correction," is the odometer linear

scale correction.

The fifth parameter, "start_test," is the button to start testing the odometer

linear scale correction.

10) Ensure the robot is properly aligned and positioned at the starting point
marker. Check the box for "start_test" and the robot will move forward.

Observe if the robot travels in a straight line.

SSH

a TS

1m

11) If there is deviation, adjust the value of "odom_linear_scale_correction".
This value adjusts the motor's scaling factor for forward movement. It is

recommended to adjust this value by increments of 0.01 each time.



=== Page 19 ===
Hiwoander Shenzhen Hiwonder Technology Co,Ltd

‘Parameter Reconfigure D@® -o
Filter key: & Ba /salibrate linear

Collapse all) | Expand all use_sim_time

arm_controller test_distance 1.0

speed 0.2
controller_manager
ekf_filter_node tolerance 0.03

imu_calib
imu_filter odom _linear_scale_ correction 1.0

joint_state_publisher

odom_publisher start_test

robot_state_publis...
ros_robot_controller
servo_manager

Refresh

(System message might be shown here when necessary)

12) After completing the calibration, enter the command to navigate to the
calibration configuration file directory and update it with the calibrated

parameter values.

cd ~/ros2_ws/src/driver/controller/config && vim calibrate_params.yaml

calibrate_params.yaml

13) Press the "I" key to enter edit mode and modify the value of
"linear_correction_factor" to the adjusted value of

"odom_angule_scale_correction."

14) After making the modifications, press the "ESC" key, enter ":wq" to exit

and save the changes.

15) If you need to terminate this program, use short-cut ‘Ctrl+C’.

2. Publish IMU and Odometer Data

In robot navigation, accurately calculating real-time position is essential.

Normally, we obtain odometer information using motor encoders and the

19



=== Page 20 ===
Hiwoander Shenzhen Hiwonder Technology Co,Ltd

robot's kinematic model. However, in specific situations, like when the robot's
wheels rotate in place or when the robot is lifted, it may move a distance

without the wheels actually turning.

To address wheel slip or accumulated errors in such cases, combining IMU
and odometer data can yield more precise odometer information. This
improves mapping and navigation accuracy in scenarios where wheel slip or

cumulative errors may occur.

2.1 Introduction to IMU and Odometer

The IMU (Inertial Measurement Unit) is a device that measures the three-axis
attitude angles (angular velocity) and acceleration of an object. It consists of
the gyroscope and accelerometer as its main components, providing a total of
6 degrees of freedom to measure the object's angular velocity and

acceleration in three-dimensional space.

An odometer is a method used to estimate changes in an object's position over
time using data obtained from motion sensors. This method is widely applied in
robotic systems to estimate the distance traveled by the robot relative to its

initial position.

There are common methods for odometer positioning, including the wheel
odometer, visual odometer, and visual-inertial odometer. In robotics, we
specifically use the wheel odometer. To illustrate the principle of the wheel
odometer, consider a carriage where you want to determine the distance from
point A to point B. By knowing the circumference of the carriage wheels and
installing a device to count wheel revolutions, you can calculate the distance
based on wheel circumference, time taken, and the number of wheel

revolutions.

20



=== Page 21 ===
Hiwoander Shenzhen Hiwonder Technology Co,Ltd

While the wheel odometer provides basic pose estimation for wheeled robots,
it has a significant drawback: accumulated error. In addition to inherent
hardware errors, environmental factors such as slippery tires due to weather
conditions contribute to increasing odometer errors with the robot's movement

distance.

Therefore, both IMU and odometer are essential components in a robot. These
two components are utilized to measure the three-axis attitude angles (or
angular velocity) and acceleration of the object, as well as to estimate the

distance, pose, velocity, and direction of the robot relative to its initial position.

To address these errors, we combine IMU data with odometer data to obtain
more accurate information. IMU data is published through the "/imu" topic, and
odometer data is published through "/odom". After obtaining data from both
sources, the data is fused using the "ekf" package in ROS, and the fused

localization information is then republished.

2.2 IMU Data Publishing

2.2.1 Initiate Service

Note: When entering commands, it is essential to strictly distinguish between
uppercase and lowercase letters, and keywords can be autocompleted using Tab

key.

1) Start the robot, and access the robot system desktop using NoMachine.

2) Click-on | to open the command-line terminal.

3) Execute the command, and hit Enter to disable the app auto-start service.

sudo systemctl stop start_app_node.service

21



=== Page 22 ===
e
HIVW/E9MCOECT Shenzhen Hiwonder Technology Co,Ltd
stop start_app_node.service

4) Run the following command, and hit Enter key to initiate the chassis

control node.

ros2 launch ros_robot_controller ros_robot_controller.launch.py

Launch ros_robot_controller ros_robot_controller.launch.py

5) Open anew command-line terminal, then input the following command

and hit Enter key to start publishing the IMU data.

ros2 launch peripherals imu_filter.launch.py

Launch peripherals imu_filter.launch.py

2.2.2 Data Viewing

1) Open anew command-line terminal and run the following command to

check the current topic:

ros2 topic list

22



=== Page 23 ===
»ne he n H yond inoiogy —O Tt

topic list
/imu
/imu_corrected
/parameter_events
/ros_robot_controller/battery
/ros_robot_controller/bus_servo/set_position
/ros_robot_controller/bus_servo/set_state
/ros_robot_controller/button
/ros_robot_controller/enable_ reception
/ros_robot_controller/imu_raw
/ros_robot_controller/ joy
/ros_robot_controller/pwm_servo/set_state
/ros_robot_controller/sbus
/ros_robot_controller/set_buzzer
/ros_robot_controller/set_led
/ros_robot_controller/set_motor
/ros_robot_controller/set_oled
/rosout
/tf

2) Next, enter the command to check the type, publishers, and subscribers of
the /imu topic. You can replace this with any other topic you need to check.

The type of this topic is sensor_msgs/msg/Imu.
ros2 topic info /imu

topic info /imu
Type: sensor_msgs/msg/Imu

Publisher count: 1
Subscription count: 0

3) Use the following command to display the content of the topic message.

Feel free to replace 'imu' with the name of the topic you wish to view.

ros2 topic echo /imu

topic echo /imu

23



=== Page 24 ===
Hiwoander Shenzhen Hiwonder Technology Co,Ltd

angular_velocity:
x: -0.0007023881084129262
y: -0.0012877124562211285
Zz: -0.0006172497924044479
angular_velocity_covariance:
- @.01

mee
~~

ear_acceleration:
1.2622444743093562
-0.24267646318977404
-12.979330169014995
Linear_acceleration_covariance:
- 0.0004

0.0

- 6.
- 6.
- 6.
- 6.
0.
0.
0.
0.
n
es
y:
Zz:

The terminal will display the data from the three axes of the IMU.

2.3 Odometer Data Publishing

2.3.1 Initiate Service

Note: When entering commands, it is essential to strictly distinguish between
uppercase and lowercase letters, and keywords can be autocompleted using Tab

key.

1) Start the robot, and access the robot system desktop using NoMachine.

2) Double-click | to open the command line terminal.

3) Execute the command, and hit Enter to disable app auto-start service.

sudo systemctl stop start_app_node.service

stop start_app_node.service

4) Enter the command and press Enter to start publishing odometry data:

ros2 launch controller odom_publisher.launch.py

24



=== Page 25 ===
Hiwoander Shenzhen Hiwonder Technology Co,Ltd

Launch controller odom_publisher. launch. py

2.3.2 Data Viewing
1) Open anew command-line terminal, and run the command below to check

the current topic.

ros2 topic list

topic List
/cmd_vel
/controller/cmd vel
/controLller_manager/joint_states
/joint_states
/odom raw
/parameter_events
/robot_description
/ros_robot_controller/battery
/ros_robot_controller/bus_servo/set_position
/ros_robot_controller/bus_servo/set_state
/ros_robot_controller/button
/ros_robot_controller/enable_ reception
/ros_robot_controller/imu_raw
/ros_robot_controller/ joy
/ros_robot_controller/pwm_servo/set_state

2) Enter the command to check the type, publishers, and subscribers of the
/odom_raw topic. You can replace this with any other topic you need to check.

The type of this topic is nav_msgs/msg/Odometry

ros2 topic echo /odom_raw

topic info /odom_raw
Type: nav_msgs/msg/Odometry

Publisher count: 1
Subscription count: 0

3) Enter the command to print the topic message contents. You can replace

the topic you want to view as needed.

ros2 topic echo /odom_raw

25



=== Page 26 ===
Hiwoander Shenzhen Hiwonder Technology Co,Ltd

topic echo /odom_raw

nanosec: 936043488
frame_id: odom
child frame_id: base footprint
pose:
pose:
position:
x: 0.0
y: 0.0
z: 0.0
orientation:
x: 0.0
y: 0.0
z: 0.0
w: 1.0
covariance:
oe |

0
- 6.6
- 6.6
0

The message content includes acquired pose and twist data.

3. Robot Speed Control
Speed control is achieved by adjusting the linear velocity parameter.
3.1 Program Logic

Based on the robot's movement characteristics, forward and backward motion,
as well as turning, are achieved by controlling the forward and reverse rotation
of the drive wheels. In the program, the /controller/cmd_vel topic is subscribed
to for movement control, obtaining the set linear and angular velocities. These
velocities are then analyzed and calculated to determine the robot's movement

speed. The source code for this program is located at:

/home/ubuntu/ros2_ws/src/driver/controller/controller/odom_publisher_

node.py

26



=== Page 27 ===
Hiwoander Shenzhen Hiwonder Technology Co,Ltd

(Node):

(self, name):
rclpy.init()
().__init__(name)

self.x =

self.y =

self.linear_x =

self.linear_y =

self.angular_z =

self.pose_yaw =

self.last_time =

self.current_time =
signal.signal(signal.SIGINT, self.shutdown)

self.ackermann = ackermann.AckermannChassis(wheelbase= ,» track_width= , wheel_diameter=
self.mecanum = mecanum.MecanumChassis(wheelbase= , track_width= , wheel_diameter=

self.declare_parameter(
self.declare_parameter(
self.declare_parameter (
self.declare_parameter(
self.declare_parameter(
self.declare_parameter (
self .declare_parameter(

3.2 Disable APP Service and Initiate Speed Control

Note: When entering commands, it is essential to strictly distinguish between
uppercase and lowercase letters, and keywords can be autocompleted using Tab

key.

1) Start the robot, and access the robot system desktop using NoMachine.

r

2) Click-on bal to start the command-line terminal.

3) Execute the command and hit Enter to disable the app auto-start service.

sudo systemctl stop start_app_node.service

stop start_app_node.service
4) Enter the command to enable motion control service.

ros2 launch controller controller.launch.py

Launch controller controller. launch.py

5) Open anew ROS2 command-line terminal, then enter the following

command to enable the speed control.

27



=== Page 28 ===
Hiwoander Shenzhen Hiwonder Technology Co,Ltd

ros2 topic pub /controller/cmd_vel geometry_msgs/Twist "linear:
x: 0.0
y: 0.0
z: 0.0
angular:
x: 0.0
y: 0.0
z: 0.0"

topic pub /controller/cmd_vel geometry_msgs/Twist

publisher: beginning loop
publishing #1: geometry_msgs.msg.Twist(linear=geometry_msgs.msg.Vector3(x=0.0, y=0.0, z=0.0),

publishing #2: geometry_msgs.msg.Twist(linear=geometry msgs.msg.Vector3(x=0.0, y=0.0, z=0.0),

In this context, ‘linear’ represents the set linear velocity, considering the robot's
viewpoint where the X-axis points forward without any influence from the Y or

Z directions.

On the other hand, ‘angular’ pertains to the set angular velocity. A positive
Z-value induces a left turn in the robot, while a negative Z-value causes the

robot to turn right. This configuration has no impact on the X and Y directions.

Note:

1. In this scenario, the linear velocity (x) is measured in meters per second, and it
is advisable to maintain it within the range of "-0.6 to 0.6".

2. The angular velocity (z) denotes the turning speed and is determined by the
formulas V=uR (linear velocity equals angular velocity times radius) and
tan®A=D/R (where z=w, D=0.213, and ®A represents the turning angle). The angle

MA should be within the range of 0 to 36 degrees.

Use the arrow keys to navigate and modify the relevant parameters. For

28



=== Page 29 ===
Hiwoander Shenzhen Hiwonder Technology Co,Ltd

example, to make the robot move forward, adjust the linear velocity (X) to 0.1,

and then press Enter to execute the action.

topic pub /controller/cmd_vel geometry_msgs/Twist

publisher: beginning loop
publishing #1: geometry_msgs.msg.Twist(lLinear=geometry_msgs.msg.Vector3(x=0.1, y=0.0, z=0.0)

6) If you need to stop the robot, open a new terminal, change the linear

velocity back to '0.0', and then press Enter.

topic pub /controller/cmd_vel geometry_msgs/Twist

publisher: beginning loop
publishing #1: geometry_msgs.msg.Twist(linear=geometry_msgs.msg.Vector3(x=0.0, y=0.0, z=0.0),

7) Toclose this feature, press "Ctrl+C" in each terminal interface.

Note: To bring the robot car to a stop, please create a new terminal and adjust the
linear velocity. Using the 'Ctrl+C' shortcut alone may not effectively halt the robot

Car.

3.3 Change Forward Speed

By modifying the linear velocity value (X), the robot can achieve forward
movement at variable speeds. For instance, to make the robot shift diagonally
to the left front, during step 5 in ‘3.2 Disable App Service and Initiate Speed
Control’, set X to 'X: 0.3".

29



=== Page 30 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

der ontroLller/cmd vel

Upon pressing Enter, the robot will move forward at a speed of 0.3 meters per

second in a straight direction.

3.4 Program Outcome

After the game starts, the robot will go forward at the speed of 0.3m/s.

3.5 Program Analysis

controller.launch

Hilo)

(aESRAN

calibrate params.yaml ioe Se

odom _publisher.py

The controller.launch file is the launch file, calibrate_params.yaml is the
configuration file, and odom_publisher.py is the program file. During startup,
the launch file is executed first. It loads the YAML configuration file and passes
the parameters to the ROS node. The node then reads the configuration
parameters from the ROS node for initialization and communicates with other

nodes to collaboratively implement the functions.

30



=== Page 31 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

3.5.1 Launch File

controller.launch.py file description

odom publisher launch Odometer

Invoked launch =< imu filter launch Acceleration sensor

controller.launch.py | servo controller launch Servo control
Nodes that are

launched ekf filter node EKF fusion

The launch file is located in:

/home/ubuntu/ros2_ws/src/driver/controller/launch/controller.launch.py

@ Set the storage path

Retrieve the paths for the three packages: peripherals, controller, and

servo_controller.

31



=== Page 32 ===
odom_publisher_launch Odometer launch

imu_filter_launch IMU launch

@ Initiate Node

Launch the EKF fusion node.

3.5.2 Python Program

32



=== Page 33 ===
LJ *
> She 3 j a Tt oy {
liv -)f ioer henzhen Hiwonder Technology Co,Ltd

- Class Controlle Parameter

odom publisher node.py parameter ODOM _TWIST.COVARIANCE

Function

The Python program is saved in:

/home/ubuntu/ros2_ws/src/driver/controller/controller/odom_publisher_

node.py

Sd Import Library

The controller class is invoked here, and wait for the node to exit.

¢ Global Parameter

33



=== Page 34 ===
ODOM POSE COVARIANCE Odometer POSE covariance

When speed is 0,

ODOM POSE COVARIANCE STOP 5 :
‘i = = Mileage POSE covariance

ODOM_TWIST_ COVARIANCE  ijeage TWIST covariance

When speed is 0,

ODOM_TWIST_COVARIANCE STOP Mileage TWIST covariance

¢ Function

49 def rpy2
50 cy
51

52

53

54

55

56

57

q

return q.orienta

return rc

The function 'rpy2qua’' is used to convert Euler angles to quaternions.

The function 'qua2rpy' is used to convert quaternions to Euler angles.

34



=== Page 35 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

Sd Analysis of the Controller Class

Invoke kinematics

The 'self.ackermann'’ calls the Ackermann kinematics and initializes the

Ackermann kinematics object.

The 'self.mecanum' calls the Mecanum kinematics and initializes the Mecanum

kinematics object.

Define ROS parameters:

The function 'self.declare_parameter' is used to define a certain parameter.

The function 'self.get_parameter' is used to obtain a certain parameter.
pub _odom_topic: Whether to publish the odometry node
base_frame_id: Robot footprint ID

odom_frame_id: Robot odometry ID

linear_correction_factor: Linear velocity correction factor
angular_correction_factor: Angular velocity correction factor
machine_type: Type of robot

Publish odometer:

35



=== Page 36 ===
Hiweoander Shenzhen Hiwonder Technology Co,Ltd

Based on the parameter 'pub_odom_topic', determine whether to publish the
odometry node. If publishing is required, initialize the node, fill in the
corresponding parameters, and publish the odometry using the
'self.create_publisher' function. Update the odometry data using the

‘self.cal_odom_fun' function.

Topic Publishing:

The function 'self.create_subscription' is used to receive topics.

The function 'self.create_service' is used to create services.

self.motor_pub publishes the motor control topic

'ros_robot_controller/set_motor'’, with the message type MotorsState.

self.servo_state_pub publishes the servo control topic
‘ros_robot_controller/bus_servo/set_state’, with the message type

SetBusServoState.

self.pose_pub publishes the servo control topic 'set_pose’, with the message

type PoseWithCovarianceStamped.

36



=== Page 37 ===
a IWE) M Oo ES t Shenzhen Hiwonder Technology Co,Ltd

Publishes the topic 'set_odom'’, with the message type Pose2D, and the

callback function self.set_odom.

Publishes the topic 'controller/cmd_vel', with the message type Twist, and the

callback function self.cmd_vel_callback.

Publishes the topic 'cmd_vel', with the message type Twist, and the callback

function self.set_app_cmd_vel_callback.

Publishes the service 'controller/load_calibrate_param’, with the service type

Trigger, and the callback function self.load_calibrate_param.

Publishes the service '~/init_finish', with the service type Trigger, and the

callback function self.get_node_state.

Explanation of Controller Class Functions:

get_node state Used to obtain the current node status, as a callback function

shutdown Used to shut down the ROS node, as a callback function

Used to read the current motion parameters,
load _ calibrate param See ey mae ae

set_odom Used to read and set odometry, as a callback function

app_cmd_vel_callback Used to set the app speed, as a callback function

cmd_vel_callback Used to set velocity, as a callback function

cal odom_fun _—_ Used to publish odometry data

37


