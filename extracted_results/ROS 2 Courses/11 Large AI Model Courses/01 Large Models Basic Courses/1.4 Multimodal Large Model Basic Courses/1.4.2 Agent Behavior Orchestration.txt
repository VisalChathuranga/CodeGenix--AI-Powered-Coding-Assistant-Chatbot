
=== Page 1 ===
Hiwoander Shenzhen Hiwonder Technology Co,Ltd
1.4.2 Agent Behavior Orchestration

Note:

1) This section requires the configuration of the API key in "1.3.2 Vision Language
Model Accessing" before proceeding. Additionally, ensure that the images to

be used in this section are imported.

2) This experiment requires either an Ethernet cable or Wi-Fi connection to

ensure the main control device can access the network properly.

3) The purpose of this course experiment is to obtain data in a specified format
returned by the large model based on the prompt words set in the model.

During development, you can use the returned data for further tasks.

1. Experiment Steps

1) To check the microphone's port number, first disconnect the microphone
and run the command. Then reconnect the microphone and run the
command again to determine the port number (Note: do not connect any

other USB devices during this process).
ll /dev | grep USB

[dev | USB

@ After disconnecting the microphone, no USB device should appear.
/dev | USB
@ Upon reconnecting the microphone, a USB port (e.g., ttyCH341USB1) will

be listed (make sure to note this device name). The device name may vary

depending on the main controller.



=== Page 2 ===
Hiwoander Shenzhen Hiwonder Technology Co,Ltd

2) Execute the following command to navigate to the directory of Large

Model.
cd large_models/
large models/

3) Open the configuration file to enter your API Key. After editing, press Esc,

then type :wq and hit Enter to save and exit:
vim config.py

lim api_key = °'
lim_base_url ‘https://api.openai.com/v1

os.environ[ “OPENAI_AP Y"] = 1lm_api key

4) Fill in the detected port number and update the corresponding microphone
port settings for either the WonderEcho Pro or the Six-channel
Microphone.

Uncomment the port you wish to use and comment out the settings for any

unused ports.
vim openai_agent_demo.py

Modify the settings as follows. For WonderEcho Pro, update the corresponding

configuration

port =| ‘'/dev/ttyC

kws = awake.}

For 6-channel Microphone, update the respective settings:

port = |'/dev/

kws = awake.CircleMic(port

5) Run the program:

python3 openai_agent_demo.py



=== Page 3 ===
Hiwoander Shenzhen Hiwonder Technology Co,Ltd

openai_ agent demo.

6) The program will print the prompts configured for the large model. The

large model will then return data formatted according to these prompts.

2. Function Realization

1) After running the program, the voice device will announce, "I'm ready." At
this point, say "HELLO_HIWONDER" to the device to activate the agent.
When the device responds with "I'm here," it indicates that the agent has
been successfully awakened. To modify the wake word. For the
Six-channel Microphone, refer to Section 2.3 Voice Wake-Up — 2.
6-Microphone Circular Array for instructions on customizing the wake
word. For WonderEcho Pro, refer to Section “Appendix\ 1. Firmware

Flashing Tool\ WonderEchoPro Firmware Generation.”

2) After updating the wake word, you can say: "Take two steps forward, turn
left and take one step back". The agent will respond according to the

format we have defined.



=== Page 4 ===
Hiwoander Shenzhen Hiwonder Technology Co,Ltd

asr time: 0.53

asr_result: |Take two steps forward, turn left and take one step back

llm time: 1.3233377933502197

Llm_result: {"action":["forward()","forward()","turn_left()","back()"],"response":"Forward march! Let's left and Moonwalk outta here!"}

agent_result: ['forward()', 'forward()', ‘turn_left()', ‘back()'] Forward march! Let's left and Moonwalk outta here

Time to first byte: 1.65 seconds

ALSA lib pcm.c:8568:(snd_pcm_recover) underrun occurred
ALSA lib pcm.c:8568:(snd_pcm_recover) underrun occurred
ALSA lib pcm.c:8568:(snd_pcm_recover) underrun occurred
[Playback Thread] Playback stream stopped and closed.
[TTS] Playback task complete.

forward

forward

turn_left

back



