
=== Page 1 ===
HIW/E9MOCT Shenzhen Hiwonder Technology Co,Ltd

Lesson 16 ROS2 TF2 Robot Coordinate

System Manager

1. TF2 Introduction

The coordinate system is a very familiar concept for us, it is also an important
foundation in robotics. In a complete robot system, there are often multiple
coordinate systems. How should the positional relationships between these
coordinate systems be managed? ROS provides us with a magical tool for

managing coordinate systems: TF2.

In a mobile robot system, the coordinate system also serves as an important
role. For example, the center point of a mobile robot is the base coordinate
system, known as Based Link.The position of Lidar is referred to as the lidar
coordinate system, or laser link. As the robot moves, the odometry coordinate
system, or odom. However, odometry tend to accumulate errors and drift. The

absolute positional reference system is known as the map coordinate system.

The relationships between coordinate systems, layered one upon the other,
are complex. Some are relatively fixed. Even seemingly simple coordinate
systems become intricate within spatial contexts. A well-managed coordinate

system becomes particularly crucial in such scenarios.



=== Page 2 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

The basic theory of coordinate transformation relationships is explained in
every textbook on robotics. It can be decomposed into two parts: translation
and rotation, described using a 4*4 matrix. Drawing coordinate systems in
space and the transformation relationships between them is essentially a

vectorial description.

The underlying principle of the TF (Transform) functionality in ROS is to
encapsulate these mathematical transformations. Detailed theoretical
knowledge can be found in robotics textbooks. Our focus here is primarily on

explaining the practical usage of the TF coordinate management system.

2. Operations

1) Click on ® and select “System Tools —Terminator’” in sequence.



=== Page 3 ===
HIW/E9MOCT Shenzhen Hiwonder Technology Co,Ltd

Or
@ Programming

Internet

[iy Sound & Video

m
¥ Graphics

g Accessories

4d

cy Help

a
Preferences

2) Input the command “ros2 launch turtle_tf2_py

turtle_tf2_demo.launch.py” to run the turtle_tf2_demo.launch.py file.

ubuntu@raspberrypi:~$ ros2 Launch turtle_tf2_py turtle_tf2_demo. Launch. py |

3) Right click on a black space and select “Split Vertically” to create a

new terminal window.

Jsage is <1

started roslaunch server http://raspberrypi:41
ros_comm version 1.14.13

auto-starting new master
process[master]: started with pid [835]
ROS_MASTER_URI=http://raspberrypi:11311/

4) Input the command “ros2 run turtlesim turtle_teleop_key” to run the

turtle keyboard control node.



=== Page 4 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

ubuntu@raspberrypt: ~ 39x24
ubuntu@raspberryp1i:~$ ros2 run turtlesi
m turtle_teleop_key
Reading Trom keyboard

Use arrow keys to move the turtle.

Use G|B|V|C|D|/E|R|T keys to rotate toa
bsoLlute orientations. 'F' to cancelar
otation.

'Q' to quit.

5) Press “t|<—>” keys to control the movement of the turtle. Another turtlr

will also move accordingly.

6) Refer to step 3) to open a new terminal, and then input the command
“ros2 run tf2_ros tf2_echo turtle2 turtle1” to view the specific relationship

between the turtle1 and turtle2 coordinate frames.



=== Page 5 ===
HIW/E9MOCT Shenzhen Hiwonder Technology Co,Ltd

ubuntu@raspberrypi:~$|ros2 run tft2_ros tf2_echo turtle2 turtle1
[INFO] [1706512580.259346595] [tf2_echo]: Waiting for transform turtle2 -> turt
lei: Invalid frame ID "turtle2" passed to canTransform argument target_frame - f
rame does not exist
At time 1706512582.236660386
hae meng [9.000, 9.000, 9.000]
- Rotation: in Quaternion [O.000, 0.000, 0.017, 1.000]
- Rotation: in RPY (radian) [0.000, -0.000, 0.035]
- Rotation: in RPY (degree) [0.000, -0.000, 1.994]
- Matrix:
©.999 -0.035 0.000 0.000
0.035 0.999 0.000 0.000
0.000 0.000 1.000 0.000
@.000 0.000 0.000 1.000
At time 1706512583 .228831090
Translation: [0.000, 0.000, 0.000]
- Rotation: in Quaternion [0.000, 0.000, 0.017, 1.000]
- Rotation: in RPY (radian) [0.000, -0.000, 0.035]
- Rotation: in RPY (degree) [0.000, -0.000, 1.994]

The transformation values of the coordinate frames are cyclically printed in the
terminal, consisting of two parts: translation and rotation, along with the

rotation matrix.

3. Static TF Broadcasting

3.1 Create static_tf_broadcaster.py

1) Click on e and select “System Tools Terminator” in sequence.

Des
it) Programming

Internet

if Sound & Video

m
bd Graphics

] Accessories

ee

ty Help

=
Preferences

¢/ Run

Fo Shutdown

1) Input the command “cd hiwonder_ws/src/” to switch to the src folder



=== Page 6 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

within the hiwonder_ws workspace.

ubuntu@raspberrypi:~$ cd hiwonder_ws/src/

ubuntu@raspberrypi:~/hiwonder_ws/src$ i}

2) Input the command “ros2 pkg create tf_demo --build-type
ament_python --dependencies rclpy” and press Enter to create a package
named “tf_demo’” with dependency rclpy.

ubuntu@raspberrypi:~/hiwonder_ws/src$ ros2 pkg create tf_demo --build-type ament

python --dependencies rclpyff

3) Input the command “cd tf_demo/tf_demo/” to switch to the directory

of the tf_demo package.

ubuntu@raspberrypi:~/hiwonder_ws/src$ cd tf_demo/tf_demo/

ubuntu@raspberrypi:~/hiwonder_ws/src/tf_demo/tf_demo$ il

4) Enter the command “vim static_tf_broadcaster.py” to edit the
program, copy and paste the program below. If you need to make changes,
press "i" to enter insert mode. Once you've finished editing, press "Esc", then
type ":wq" to save and exit.

ubuntu@raspberrypi:~/hiwonder_ws/src/tf_demo/tf_demo$ vim static_tf_broadcaster.

pyfl

#!/usr/bin/env python3

# -*- coding: utf-8 -*-

import rclpy
# ROS2 Python interface libraries

from rclpy.node import Node

# ROS2 node class




=== Page 7 ===
HIW/E9MOCT Shenzhen Hiwonder Technology Co,Ltd

from geometry_msgs.msg import TransformStamped

# Coordinate transformation message

import tf_transformations

# TF coordinate transformation library

from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster

# TF static coordinate frame broadcaster class

class StaticT FBroadcaster(Node):
def init__(self, name):

super().__init__ (name)

# ROS2 node parent class initialization

self.tf_broadcaster = StaticTransformBroadcaster(self)

# Create a TF broadcaster object

static_transformStamped = TransformStamped()

# Create a coordinate transformation message object

static_transformStamped.header.stamp =
self.get_clock().now().to_msg() # Set the timestamp of a coordinate

transformation message

static_transformStamped.header.frame_id = 'world'

# Set the source coordinate frame of a coordinate transformation

static_transformStamped.child_frame_id = ‘house’

# Set the target coordinate frame of a coordinate transformation

static_transformStamped.transform.translation.x = 10.0

# Set the translation along the X, Y and Z axes in a coordinate transformation




=== Page 8 ===
HIW/E9MOCT Shenzhen Hiwonder Technology Co,Ltd

static_transformStamped.transform.translation.y = 5.0
static_transformStamped.transform.translation.z = 0.0

quat = tf_transformations.quaternion_from_euler(0.0, 0.0, 0.0)

# Converting Euler angles to quaternions Croll, pitch, yaw)

static_transformStamped.transform.rotation.x = quat[0]
# Set the rotation (quaternion) along the X, Y, and Z axes in a coordinate

transformation
static_transformStamped.transform.rotation.y = quat[1]
static_transformStamped.transform.rotation.z = quat[2]

static_transformStamped.transform.rotation.w = quat[3]

self.tf_broadcaster.sendTransform(static_transformStamped)
# Broadcasting static coordinate transformation. The relative position between

two coordinate frames remains unchanged after broadcasting .
def main(args=None):

rclpy.init(args=args) # ROS2 Python

interface initialization

node = StaticT FBroadcaster("static_tf_broadcaster") # Create ROS2

node object and initialize it.

rclpy.spin(node) # Wait for
ROS2 to exit in a loop

node.destroy_node() # Destroy

node object




=== Page 9 ===
Hiweonder Shenzhen Hiwonder Technology Co,Ltd

rclpy.shutdown()

(args= ie
rclpy.init(args=args)
node = StaticTFBroadcaster(

rclpy.spin(node)
node.destroy_node( )
rclpy.shutdown( )}

5) Input the command “chmod +x static_tf_broadcaster.py” and press
Enter to grand the executable permissions to the saved

static_tf_broadcaster.py file.

ubuntu@raspberrypi: ~/hiwonder_ws/src/tf_demo/tf_demo$ chmod +x static_tf_broadca
ster.py

ubuntu@raspberrypi:~/hiwonder_ws/src/tf_demo/tf_demo$

3.2 Create tf_listener.py

1) Enter the command “vim tf_listener.py” to edit the program, copy the
following program. If need to make modifications, you can press “i” to enter the
insert mode. After you’ve have finished the modifications, press “Esc” and

input “:wq” to save and exit.

ubuntu@raspberrypi:~/hiwonder_ws/src/tf_demo/tf_demo$ vim tf_lListener.py

#!/usr/bin/env python3

# -*- coding: utf-8 -*-

import rclpy # ROS2

Python interface libraries




=== Page 10 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

from rclpy.node import Node # ROS2 node
class
import tf_transformations # TF coordinate

transformation library

from tf2_ros import TransformException # The

exception classes for left-side transformations in TF

from tf2_ros.buffer import Buffer # The buffer class

for storing coordinate transformation information

from tf2_ros.transform_listener import TransformListener # The listener class

for monitoring coordinate transformations.

class TFListener(Node):

def init__(self, name):

super().__init__ (name) #

ROS2 node parent class initialization

self.declare_parameter('source_frame’, 'world’) #

Create the parameters for the name of source coordinate frame

self.source_frame = self.get_parameter( #

Prioritize the externally set parameter value, otherwise, use the default value.

‘source_frame').get_parameter_value().string_value




=== Page 11 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

self.declare_parameter(‘target_frame’, 'home’) #

Create the parameters for the name of a target coordinate frame.

self.target_frame = self.get_parameter( #

Prioritize the externally set parameter value, otherwise, use the default value.

‘target_frame').get_parameter_value().string_value

self.tf_buffer = Buffer() #

Create the buffer area for storing coordinate transformation information

self.tf_listener = TransformListener(self.tf_buffer, self) # Create a

listener for coordinate transformations

self.timer = self.create_timer(1.0, self.on_timer) # Create a

fixed-rate timer for processing coordinate information

def on_timer(self):

try:

now = rclpy.time. Time() #

Obtain the current time of ROS system
trans = self.tf_buffer.lookup_transform( #

Monitor the coordinate transformation from a source frame to a target frame at

the current time.

self.target_frame,

self.source_frame,




=== Page 12 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

now)

except TransformException as ex: #

If the coordinate transformation retrieval fails, enter the exception reporting.
self.get_logger().info(

fCould not transform {self.target_frame} to

{self.source_frame}: {ex}')

return

pos = trans.transform.translation #

Retrieve the position information

quat = trans.transform.rotation #

Obtain orientation information (quaternion)

euler = tf_transformations.euler_from_quaternion([quat.x, quat.y,

quat.z, quat.w])

self.get_logger().info('Get %s --> %s transform: [%f, %f, %f|
[Yof, Yof, Yf]’

% (self.source_frame, self.target_frame, pos.x, poOSs.y, pOs.zZ,

euler[0], euler[1], euler[2]))

def main(args=None):

rclpy.init(args=args) # ROS2 Python interface
initialization node = TFListener("tf_listener") # Create ROS

node object and initialize it

rclpy.spin(node) # Wait ROS2 to exit in al

loop




=== Page 13 ===
Hiweonder Shenzhen Hiwonder Technology Co,Ltd

node.destroy_node() # Destroy node object
rclpy.shutdown() # Close ROS2 Python
interface

(args= ie
rclpy.init(args=args)
node = StaticTFBroadcaster(

rclpy.spin(node)
node.destroy_node( )
rclpy.shutdown( )}

2) Enter the command “chmod +x tf_listener.py” and press Enter to

grant the executable permissions to the saved tf_listener.py file.

ubuntu@raspberrypi: ~/hiwonder_ws/src/tf_demo/tf_demo$ chmod +x tf_lListener.py

ubuntu@raspberrypi: ~/hiwonder_ws/src/tf_demo/tf_demo$ |

3.3 setup.py File Setting

the metadata and build configuration for a ROS2 package, providing
information such as package metadata, dependencies, build configuration,
and installation logic. It helps developers correctly build, install, and use ROS2
packages. It is necessary to write the program entry points for

static_tf_broadcaster.py and tf_listener.py into the setup.py file.

1) Enter the command “cd ..” to switch to the parent directory.

ubuntu@raspberrypi: ~/hiwonder_ws/src/topic_demo/topic_demo$ cd ..

ubuntu@raspberrypi: ~/hiwonder_ws/src/topic_demo$ |

2) Enter the command “vim setup.py” and press Enter to open the setup.py

file.

ubuntu@raspberrypi:~/hiwonder_ws/src/topic_demo$ vim setup.py




=== Page 14 ===
3) Press “i” to enter the editing mode, and then enter the following code to the

corresponding position.

'static_tf_broadcaster = tf_demo.static_tf_broadcaster:main’,

'tf_ listener = tf_demo.tf_listener:main’,

install_requires=['setuptools'],
zip_safe= ‘
maintainer='ubuntu',
maintainer_email='ubuntu@todo.todo',
description='TODO: Package description',

='TODO: License declaration',
tests_require=['pytest'],
entry_points={

‘console scr
‘static_tf_broadcaster ) tf_broadcaster:main',
'tf_listener = tf_de
ur e Jroaacaster = 2m ur 6 ft Jroaacaster:main ,

‘turtle_following = tf_demo.turtle_following:main',

l,
I3,
)

-- INSERT --

4) Enter “:wq’ to save and exit the file.

‘console_scripts': [
‘static_tf_broadcaster = tf_demo.static_tf_broadcaster:main',
'tf_listener = tf_demo.tf_listener:main',
‘turtle_tf_broadcaster = tf_demo.turtle_tf_broadcaster:main',

‘turtle_following = tf_demo.turtle_following:main',

3.4 Compilation and Execution

1) After granting the executable permission, enter the command “cd

~/hiwonder_ws/” to switch to the directory of the workspace.

ubuntu@raspberrypi: ~/hiwonder_ws/src/hello_world_demo$ cd ~/hiwonder_ws/

ubuntu@raspberrypi:~/hiwonder_ws$ fj

2) Enter the command “colcon build” and press Enter to compile the

packages within the workspace.

ubuntu@raspberrypi:~/hiwonder_ws$ colcon build




=== Page 15 ===
3) Enter the command “source ./install/setup.bash” and press Enter

make the environment variables make effect.

ubuntu@raspberrypi:~/hiwonder_ws$ source ./install/setup.bash

4) Enter the command “ros2 run tf_demo static_tf_broadcaster” and

press Enter to start static_tf_broadcaster node.

ubuntu@raspberrypi:~$ ros2 run tf_demo static_tf_broadcaster ij

5) Right click on a blank space, select “Split Vertically” to create a new

terminal window.

$ chmod +x pose_subscriber.py
icdbd79/ros Launch-raspberrypi-821. lo

<1

started roslaunch server http://raspberrypi: 41
ros_comm version 1.14.13

stro: melodic

on: 1.14.13

auto-starting new master
process[master]: started with pid [835]
ROS_MASTER_URI=http://raspberrypi:11311/

6) Enter the command “ros2 run tf_demo tf_listener” and press Enter to

start tf_listener listener.

ubuntu@raspberrypi:~$}ros2 run tf_demo t istener

[INFO] [1706519151.659170311

me transform: [-6.000000, -11.000000, 0.900000] [0.0900000,
.9800000, 0.000000]

[INFO] [1706519152.635825534] [tf_listener]: Get world -->

me transform: [-6.000000, -11.900000, 0.900000] [0.000000,
.000000, 0.000000]
[INFO] [1706519153.637413658] [tf_lListener]: Get world -->
me transform: [-6.000000, -11.000000, 9.000000] [0.900000,
.000000, 0.000000]

It can be seen that there are two coordinate systems in the current system,

one is "world," and the other is "house." The relative positions between them



=== Page 16 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

will not change, and they are maintained by a static TF object.
3.5 Program Analysis

3.5.1 static_tf_broadcaster.py

In accordance to the realization effect, the working logic of the program is

concluded as pictured:

Import function Create TF
package broadcaster

Coordinate
transformatin

Destroy node andd Publish static TF
close interface transformation

The StaticT FBroadcaster node class was created, and during the initialization

of the node object, a TF broadcaster was created. Then, a coordinate
transformation message containing the source coordinate system (world), the
target coordinate system (home), and transformation information such as
translation and rotation, was generated. The Euler angles were converted to
quaternion format using tf_transformations. Throughout the node's runtime,
this static coordinate transformation information is continuously broadcasted
using the broadcaster object. The purpose is to provide coordinate
transformation support from the world coordinate system to the home

coordinate system for other nodes or tools.

3.5.2 tf_listener.py

In accordance to the realization effect, the working logic of the program is



=== Page 17 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

concluded as pictured:
Import funtion Set source target
package coordinate frame

Obtain coordinate
transformation

Destroy node Convert to Euler
and close interface angle display

The TFListener node class was created, and during the initialization of the
node object, a TF buffer and a listener were created. The parameter for
dynamically obtaining the source and target coordinate systems was set.
Through the timer interface, the node periodically queries the coordinate
transformation relationship between the specified coordinate systems from
the listener, retrieves their position and orientation information, and prints it
to the log. Additionally, it handles exceptions when coordinate
transformation fails. Its purpose is to monitor the dynamic transformation
relationship between specified coordinate systems in real-time and provide

real-time coordinate transformation support for other nodes or users.

4. TF Listening

4.1 Create turtle_tf_broadcaster.py

1) Click on ® and select “System Tools —Terminator’” in sequence.



=== Page 18 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

i> 7
taag
ay ~

@ Programming

@) internet
Lay interne

ib Sound & Video

i) Graphics

{5 system Tools
@ Accessories
res) Help

= Preferences

Run

¥
ra Shutdown

1) Enter the command “cd hiwonder_ws/src/tf_demo/tf_demo/” to

switch to the tf_demo folder.

ubuntu@raspberrypi: ~/hiwonder_ws/src/tf_demo/tf_demo 80x24

ubuntu@raspberrypi:~$ cd hiwonder_ws/src/tf_demo/tf_demo/
ubuntu@raspberrypi:~/hiwonder_ws/src/tf_demo/tf_demo$ |

2) Enter the command “vim turtle_tf_broadcaster.py” to edit the
program, copy and paste the program below. If you need to make changes,

press "i" to enter insert mode. Once you've finished editing, press "Esc", then

type ":wq" to save and exit.

ubuntu@raspberrypi:~/hiwonder_ws/src/tf_demo/tf_demo$ vim turtle_tf_broadcaster.

py

#!/usr/bin/env python3

# -*- coding: utf-8 -*-




=== Page 19 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

import rclpy # ROS2 Python
inteface

from rclpy.node import Node # ROS2 node class
from geometry_msgs.msg import TransformStamped # Coordinate

transformation information

import tf_transformations # coordinate

transformation library

from tf2_ros import TransformBroadcaster # TF coordinate

transformation broadcaster

from turtlesim.msg import Pose # Turtlesim turtle

position message

class Turtle TFBroadcaster(Node):

def init__(self, name):

super().__init__ (name) #

ROS2node parent class initialization

self.declare_parameter(‘turtlename’, ‘turtle’) # Create a

parameters for the name of turtle

self.turtlename = self.get_parameter( # Prioritize

the externally set parameter value, otherwise, use the default value.

‘turtlename').get_parameter_value().string_value




=== Page 20 ===
HIW/E9MOCT Shenzhen Hiwonder Technology Co,Ltd

self.tf_broadcaster = TransformBroadcaster(self) # Create a TF

coordinate transformation broadcast object and initialize it.

self.subscription = self.create_subscription( # Create a

subscriber and subscribe to the position information of the turtle.
Pose,

f/{self.turtlename}/pose’, # Utilize the

turtle name obtained from the parameter.

self.turtle_pose_callback, 1)

def turtle_pose_callback(self, msg): #
Create a callback function to handle turtle position messages and transform

them into coordinate transformations.

transform = TransformStamped()

# Create a coordinate transformation message object

transform.header.stamp = self.get_clock().now/().to_msg() #

Set the timestamp of the coordinate transformation message

transform.header.frame_id = ‘world’ #

Set the source coordinate frame of a coordinate transformation

transform.child_frame_id = self.turtlename #

Set the target coordinate of a coordinate transformation

transform.transform.translation.x = msg.x #

Set the translation along the X, Y, and Z axes in the coordinate transformation.




=== Page 21 ===
HIW/E9MOCT Shenzhen Hiwonder Technology Co,Ltd

transform.transform.translation.y = msg.y
transform.transform.translation.z = 0.0

q = tf_transformations.quaternion_from_euler(0, 0, msg.theta) #

Convert Euler angles to quaternions (roll, pitch, yaw).

transform.transform.rotation.x = q[0] #
Set the rotation (quaternion) along the X, Y, and Z axes in the coordinate

transformation.
transform.transform.rotation.y = q[1]
transform.transform.rotation.z = q[2]

transform.transform.rotation.w = q[3]

# Send the transformation

self.tf_broadcaster.sendTransform(transform) # Broadcast the
coordinate transformation, updating the transformation information promptly

after the turtle's position changes.

def main(args=None):

rclpy.init(args=args) # ROS2 Python
fe ea

node = Turtle TFBroadcaster("turtle_tf_broadcaster") # Create ROS2

node object and initialize it

rclpy.spin(node) # Loop and wait

for ROS 2 to exit.

node.destroy_node() # Destroy

node object




=== Page 22 ===
Hiweonder Shenzhen Hiwonder Technology Co,Ltd

rclpy.shutdown() # Close ROS2

Python interface

(args= ie
rclpy.init(args=args)
node = StaticTFBroadcaster(

rclpy.spin(node)

node.destroy_node( )
rclpy.shutdown( )}

3) Input the command “chmod +x turtle_tf_broadcaster.py”

ubuntu@raspberrypi:~/hiwonder_ws/src/tf_demo/tf_demo$ chmod +x turtle_tf_broadca

ster.py
ubuntu@raspberrypi: ~/hiwonder_ws/src/tf_demo/tf_demo$ |

4.2 Create turtle_following.py

1) Enter the command “vim turtle_following.py” to edit the program,
then paste the following program. If you need to make modifications, you can

press “i” to enter the insert mode. Once you've finished modifications, input

“:wq’ to save and exit the file.

ubuntu@raspberrypi:~/hiwonder_ws/src/tf_demo/tf_demo$ vim turtle_following. pyff

#!/usr/bin/env python3

-*- coding: utf-8 -*-

import math




=== Page 23 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

import rclpy # ROS2

Python interface library

from rclpy.node import Node # ROS node
class
import tf_transformations # TF coordinate

transformation library

from tf2_ros import TransformException # Abnormal

class of TF left-side transformation

from tf2_ros.buffer import Buffer #Store coordinate

transformation buffer class

from tf2_ros.transform_listener import TransformListener # Listener class fon

coordinate transformation

from geometry_msgs.msg import Twist # ROS2

velocity control message

from turtlesim.srv import Spawn # Service

interface generated by the turtle

class TurtleFollowing(Node):

def init__(self, name):

super().__init__ (name) #

ROS2 node parent class initialization

self.declare_parameter('source_frame'’, ‘turtle1') # Create’

a parameter for the name of the source coordinate system

self.source_frame = self.get_parameter( #



=== Page 24 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

Prioritize the parameter values set externally, otherwise use the default values.
‘source_frame').get_parameter_value().string_value

self.tf_buffer = Buffer() #

Create a buffer to store coordinate transformation information

self.tf_listener = TransformListener(self.tf_buffer, self) # Create a

listener for coordinate transformation

self.spawner = self.create_client(Spawn, 'spawn’) #

Create a client to generate turtle requests
self.turtle_spawning_service_ready = False #

The flag indicating whether the turtle generation service has been requested.

self.turtle_ spawned = False #

The flag indicating whether the turtle generation was successful.

self.publisher = self.create_publisher(Twist, ‘turtle2/cmd_vel'’, 1) #

Create a topic for the speed of the turtle following movement.

self.timer = self.create_timer(1.0, self.on_timer) # Create al

ifixed-period timer to control the movement of the following turtle.

def on_timer(self):

from_frame_rel = self.source_frame #

Source coordinate frame




=== Page 25 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

to_frame_rel = 'turtle2' #

Target coordinate frame

if self.turtle_spawning_service_ready: # If the

turtle generation service has been requested.

if self.turtle_ spawned: # If

the following turtle has been generated

try:

now = rclipy.time. Time() #

Obtain the current time of the ROS system
trans = self.tf_buffer.lookup_transform( #

Listen to the coordinate transformation from the source coordinate system to

the target coordinate system at the current time.
to_frame_rel,
from_frame_rel,
now)
except TransformException as ex: #
If the coordinate transformation retrieval fails, enter the exception reporting.
self.get_logger().info(

fCould not transform {to _frame_rel} to

{from_frame_rel}: {ex}')

return

msg = Twist() #



=== Page 26 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

Create speed control message

scale_rotation_rate = 1.0

Calculate the angular velocity based on the turtle's angle.
msg.angular.z = scale_rotation_rate * math.atan2(
trans.transform.translation.y,

trans.transform.translation.x)

scale_forward_speed = 0.5

Calculate the linear velocity based on the turtle’s distance
msg.linear.x = scale_forward_speed * math.saqrt(
trans.transform.translation.x ** 2 +

trans.transform.translation.y ** 2)

self.publisher.publish(msg)

Publish velocity commands for the turtle to follow movement.

else:

the following turtle has not been generated

if self.result.done():

Check if the turtle has been generated.

self.get_logger().info(

fSuccessfully spawned {self.result.result().name}')

self.turtle_ spawned = True

else:

The following turtle still hasn't been generated.

# If




=== Page 27 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

else:

the turtle generation service hasn't been requested.

if self.spawner.service_is_ready():

turtle generation server is ready.

request = Spawn.Request()

Create a request data.

request.name = ‘turtle2'

d orientation.
request.x = float(4)
request.y = float(2)

request.theta = float(0)

self.result = self.spawner.call_async(request)

the service request

self.turtle_spawning_service_ready = True

the flag indicating that the request has been sent.
else:

self.get_logger().info(‘Service is not ready’)

Notification that the turtle generation server is not yet ready.

def main(args=None):

self.get_logger().info('Spawn is not finished’)

Set the content of the request data, including the turtle's name, xy position, an

# If

# If the

#

# Send

# Set




=== Page 28 ===
Hiweonder Shenzhen Hiwonder Technology Co,Ltd

rclpy.init(args=args) # ROS2 Python interface

initialization
node = TurtleFollowing("turtle_following") # Create ROS2 node object

and initialize it

rclpy.spin(node) # Loop waiting for ROS2
to exit

node.destroy_node() # Destroy node object

rclpy.shutdown() # Shut down ROS2

Python interface

(args= ie
rclpy.init(args=args)
node = StaticTFBroadcaster(

rclpy.spin(node)

node.destroy_node( )
rclpy.shutdown( )}

2) Enter the command “chmod +x turtle_following.py” and press Enter

to grant the executable permission to the saved turtle_following.py file.

ubuntu@raspberrypi:~/hiwonder_ws/src/tf_demo/tf_demo$ chmod +x turtle_following.

4.3 Create turtle_following.launch.py

In this example, we need to start four nodes: the Turtlebot simulator,
coordinate frame broadcasting for Turtle 1, coordinate frame broadcasting for
Turtle 2, and the turtle following control. You can write the commands to start

these four nodes in the same launch file. Running the launch file will start all



=== Page 29 ===
HIW/E9MOCT Shenzhen Hiwonder Technology Co,Ltd

four nodes simultaneously.

1) Enter the command “cd..” to return to the parent directory.

ubuntu@raspberrypi:~/hiwonder_ws/src/tf_demo/tf_demo$ cd

ubuntu@raspberrypi:~/hiwonder_ws/src/tf_demo$ I
2) Then, input the command “mkdir launch’ to create the launch folder.

ubuntu@raspberrypi:~/hiwonder_ws/src/tf_demo$ mkdir Launch

3) Enter the command “cd launch/” to enter the launch folder.

iraspberrypi:~/hiwonder_ws/src/tf_demo$ cd lLaunch/

ubuntu@raspberrypi:~/hiwonder_ws/src/tf_demo/ Launch$ a

4) Enter the command “vim turtle_following.launch.py” to edit the
program, and then paste the following program. If you need to make

modifications, you can press “i”. Once you've finished the modifications, press
“Esc” and enter “:wq” to save and exit.

ubuntu@raspberrypi: ~/hiwonder_ws/src/tf_demo/launch$ vim turtle_following. Launch

. pyfl

from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument
from launch.substitutions import LaunchConfiguration

from launch_ros.actions import Node

def generate_launch_description():
return LaunchDescription([

Node(

package='turtlesim’,




=== Page 30 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

executable='turtlesim_node’,

name='sim'

);

Node(
package='tf_demo’,
executable='turtle_tf_broadcaster’,
name='broadcaster1',
parameters=[

{'turtlename’: 'turtle1'}

]

);

DeclareLaunchArgument(
‘target_frame’, default_value='turtle1',
description="Target frame name.’

);

Node(
package='tf_demo’,
executable='turtle_tf_broadcaster’,
name='broadcaster2’',
parameters=[

{'turtlename'’: 'turtle2’}




=== Page 31 ===
Hiweonder Shenzhen Hiwonder Technology Co,Ltd

);

Node(
package='tf_demo'’,
executable='turtle_following’,
name='listener’,
parameters=[

{'target_frame': LaunchConfiguration(‘target_frame')}

]

);

})

package='t
executabLe=

name=
parameters=[

]

),
Dec LareLaunchArgument (

', default_value=

5) Enter the command “chmod +x turtle_following.launch.py” and
press Enter to grant the executable permission to the saved

turtle_following.launch.py file.

ubuntu@raspberrypi:~/hiwonder_ws/src/tf_demo/launch$ chmod +x turtle_following.1
aunch. py

ubuntu@raspberrypi: ~/hiwonder_ws/src/tf_demo/ Launch$ 0

4.3 setup.py File Settings

The setup.py file defines the metadata and build configuration for a ROS2
package, providing information such as package metadata, dependencies,

build configuration, and installation logic. It helps developers correctly build,



=== Page 32 ===
HIW/E9MOCT Shenzhen Hiwonder Technology Co,Ltd

install, and use ROS2 packages. It is necessary to write the program entry
points for turtle_tf_broadcaster.py and turtle_following.py into the setup.py
file.

1) Enter the command “cd ..” to navigate to the parent directory.

ubuntu@raspberrypi:~/hiwonder_ws/src/topic_demo/topic_demo$ cd ..

ubuntu@raspberrypi: ~/hiwonder_ws/src/topic_demo$ |

2) Enter the command “vim setup.py” and press Enter to open the setup.py

file.

ubuntu@raspberrypi:~/hiwonder_ws/src/topic_demo$ vim setup.py

3) Press “i” to enter the insert mode, and then enter the following code to the

corresponding position.

import os
from glob import glob

(os.path.join(‘share’, package_name, ‘launch'), glob(os.path.join(‘launch’,

' launch.py'))),

'turtle_tf_broadcaster = tf_demo.turtle_tf_broadcaster:main’,

'turtle_ following = tf_demo.turtle_following:main’,




=== Page 33 ===
setuptools find_packages, setup

package_name = 'tf_demo'

setup(
name=package_name,
version='0.0.0',
packages=find_packages(exclude=['test']),
data_files=[
('share/ament_index/resource_index/packages',
['resource/' + package_name]),
share +
(os.path.join('share', package_name, ‘launch'), glob(os.path.join(' laun
launch.py'
],
install_requires=['setuptools'],
zip_safe= i
maintainer='ubuntu',
maintainer_email='ubuntu@todo.todo',
description='TODO: Package description BI
='TODO: License declaration',
-- INSERT --

tests_require=['pytest'],
entry_points={
console_scripts': [
‘static_tf_broadcaster = tf_demo.static_tf_broadcaster:main',
'tf_listener = tf _demo.tf listener:main'
‘turtle_tf_broadcaster = tf_demo.turtle_tf_broadcaster:main',
‘'turtle_following = tf_demo.turtle_following:main',

1,

},
)
J

- INSERT --

5) Enter “:wq’ to save and exit the file.

‘console_scripts': [
"static_tf_broadcaster = tf_demo.static_tf_broadcaster:main',
'tf_listener = tf_demo.tf_listener:main',
‘turtle_tf_broadcaster = tf_demo.turtle_tf_broadcaster:main',
‘turtle_following = tf_demo.turtle_following:main',

4.4 Compilation and Execution

1) After granting the executable permission, enter the command “cd

~/hiwonder_ws/” to switch to the directory of the workspace.



=== Page 34 ===
Hiweonder Shenzhen Hiwonder Technology Co,Ltd

ubuntu@raspberrypi:~/hiwonder_ws/src/hello_world_demo$ cd ~/hiwonder_ws/

ubuntu@raspberrypi:~/hiwonder_ws$ in

2) Enter the command “colcon build” and press Enter to compile the

packages within the workspace.

ubuntu@raspberrypi:~/hiwonder_ws$ colcon build

3) Enter the command “source ./install/setup.bash” and press Enter to

make the environment variables take effect.

ubuntu@raspberrypi:~/hiwonder_ws$ source ./install/setup.bash

4) Enter the command “ros2 launch tf_demo turtle_fllowing.launch.py’

and press Enter to start turtle_fllowing.launch.py file.

ubuntu@raspberrypi:~$ ros2 Launch tf_demo turtle_following. Launch. py

5) Right click on a blank space to select “Split Vertically” to create a new
terminal window.

11311/

chmod +x pose_subs«

d
ubuntu@ sp
. logging to /home/u rC 74¢ se - icdbd79/ros Launch-raspberrypi-821. log

ing log directory for disk usage. Thi
Ctrl-C to interrupt
checking log file disk usage. Usage is <1

started roslaunch server http://raspberrypi: 41
ros_comm version 1.14.13

o: melodic

on: 1.14.13

auto-starting new master
process[master]: started with pid [835]
ROS_MASTER_URI=http://raspberrypi:11311/

6) Enter the command “ros2 run turtlesim turtle_teleop_key” and

press Enter to start the turtle_teleop_key control node.



=== Page 35 ===
Hiweonder Shenzhen Hiwonder Technology Co,Ltd

ubuntu@raspberryp1:~$ ros2 run turtlesim turtle_teleop_k
ey
Reading from keyboard

Use arrow keys to move the turtle.

Use G|B|V|C|D|E|R|T keys to rotate to absolute orientati
ons. 'F' to cancel a rotation.

'Q' to quit.

Press “t |<-—” to control the turtle to move.

TurtleSim

4.5 Program Analysis

4.5.1 turtle_tf_broadcaster.py

According to the realization result, the logic progress for the program is shown

as pictured:



=== Page 36 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

Import function Subscribe turtle
package position information

Destroy node Generate coordinate
and close interface conversion information

Publish coordinate Set as
transformation update Euler angle

We've created the TurtleTFBroadcaster node class, which initializes a node
object and creates a TF broadcaster. This broadcaster subscribes to the
turtle's position messages. In the position callback function, it generates
coordinate transformation messages from the world coordinates to the turtle's
coordinates based on the received messages. It sets the translation as the
position and converts the rotation into quaternions using Euler angles.
Through the broadcaster, it continuously propagates the coordinate
transformation information in real-time. This allows for dynamically updating
the turtle's coordinate transformation relationship in the world coordinates
based on its real-time position, providing support for real-time coordinate

transformation for subsequent planning, control, and user nodes.
4.5.2 turtle_following.py

According to the realization result, the logic progress for the program is shown

as pictured:



=== Page 37 ===
Hiweander Shenzhen Hiwonder Technology Co,Ltd

Import function Obtain TF
package transformation

Calculate position

information

Destroy node Control turtle 2
and closé interface to move

We've created the TurtleFollowing node class, which initializes a node and
creates a TF listener and a velocity publisher. By periodically querying TF, it
obtains the coordinate relationship between the source turtle and the target
turtle, calculates the velocity command for the target turtle. In the first step, it
requests the generation of the following turtle. Then, based on the real-time
position and orientation of the source turtle, it dynamically controls the
movement of the target turtle to achieve the following effect. This
implementation, based on TF coordinate transformation, realizes a following

control application between two turtles in a ROS2 environment.


